<?xml version="1.0" encoding="utf-8"?>
<ServiceConfiguration xmlns="http://waher.se/Schema/ServiceConfiguration.xsd">
	<InitializationScript>
		<![CDATA[
		create 
		index Community_Posts_Host_Created
		on Community_Posts
		(
			Host,
			Created
		);

		create 
		index Community_Posts_Host_Link
		on Community_Posts
		(
			Host,
			Link
		);

		create 
		index Community_Posts_Host_UserId_Created
		on Community_Posts
		(
			Host,
			UserId,
			Created
		);

		create 
		index Community_Posts_Host_NrUp_Created
		on Community_Posts
		(
			Host,
			NrUp,
			Created
		);

		create 
		index Community_Posts_Host_NrDown_Created
		on Community_Posts
		(
			Host,
			NrDown,
			Created
		);

		create
		index Community_PostRef_Host_Tag_Created_Link
		on Community_PostRef
		(
			Host,
			Tag,
			Created,
			Link
		);

		create
		index Community_PostRef_Host_Link_Tag
		on Community_PostRef
		(
			Host,
			Link,
			Tag
		);

		create 
		index Community_Replies_Host_Link_Reply_Created
		on Community_Replies
		(
			Host,
			Link,
			Reply,
			Created
		);

		create 
		index Community_Replies_Host_Link_Reply_NrUp_Created
		on Community_Replies
		(
			Host,
			Link,
			Reply,
			NrUp,
			Created
		);

		create 
		index Community_Replies_Host_Link_Reply_NrDown_Created
		on Community_Replies
		(
			Host,
			Link,
			Reply,
			NrDown,
			Created
		);

		ScriptResource("/Community/Post",
		(
			Link:=UrlDecode(Request.SubPath.Substring(1));
			Post:=select top 1 * from Community_Posts where Host=Request.Host and Link=Link;
			if !exists(Post) then NotFound("Post not found.");

			PostFileName:=null;
			GW:=Waher.IoTGateway.Gateway;
			if !GW.HttpServer.TryGetFileName("/Community/PostStandalone.md",PostFileName) then ServiceUnavailable("Community Service not available.");

			MarkdownContent(LoadMarkdown(PostFileName,true))
		));

		ScriptResource("/Community/Reply",
		(
			ObjectId:=UrlDecode(Request.SubPath.Substring(1));
			Reply:=select top 1 * from Community_Replies where Host=Request.Host and ObjectId=ObjectId;
			if !exists(Reply) then NotFound("Reply not found.");

			ReplyFileName:=null;
			GW:=Waher.IoTGateway.Gateway;
			if !GW.HttpServer.TryGetFileName("/Community/ReplyStandalone.md",ReplyFileName) then ServiceUnavailable("Community Service not available.");

			MarkdownContent(LoadMarkdown(ReplyFileName,true))
		));

		ScriptResource("/Community/Author",
		(
			Author:=UrlDecode(Request.SubPath.Substring(1));

			AuthorFileName:=null;
			GW:=Waher.IoTGateway.Gateway;
			if !GW.HttpServer.TryGetFileName("/Community/Author.md",AuthorFileName) then ServiceUnavailable("Community Service not available.");

			MarkdownContent(LoadMarkdown(AuthorFileName,true))
		));

		ScriptResource("/Community/Tag",
		(
			Tag:=UrlDecode(Request.SubPath.Substring(1));

			TagFileName:=null;
			GW:=Waher.IoTGateway.Gateway;
			if !GW.HttpServer.TryGetFileName("/Community/Tag.md",TagFileName) then ServiceUnavailable("Community Service not available.");

			MarkdownContent(LoadMarkdown(TagFileName,true))
		));

		Updated:=Or([
			FtsCollection("FTS_Community_Posts","Community_Posts"),
			AddFtsProperties("Community_Posts",
			[
				"Title",
				(Obj)->ParseMarkdown(Obj.Markdown)
			]),

			FtsCollection("FTS_Community_Replies","Community_Replies"),
			AddFtsProperties("Community_Replies",
			[
				(Obj)->ParseMarkdown(Obj.Markdown)
			])
		]);

		if Updated then
		(
			Background((
				LogNotice("Reindexing full-text-seach index for Community posts.");
				ReindexFts("FTS_Community_Posts");

				LogNotice("Reindexing full-text-seach index for Community replies.");
				ReindexFts("FTS_Community_Replies");
			))
		);
		]]>
	</InitializationScript>
	<StartupScript>
		<![CDATA[
		ConfigurationPage("Community","/Community/Index.md");
		]]>
	</StartupScript>
</ServiceConfiguration>